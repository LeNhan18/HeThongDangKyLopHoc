from sqlalchemy.orm import Session, joinedload
from fastapi import HTTPException
from app.api.endpoints_ws import send_notification_to_user
from app.api.endpoints_ws import ws_manager
from app.models.attendance import Attendance
from app.models.class_model import Class as ClassModel
from app.models.course import Course as CourseModel
from app.models.feedback import Feedback
from app.models.history import ClassHistory
from app.models.notification import Notification
from app.schemas.class_schema import Class as ClassSchema, ClassCreate
from app.schemas.user import User
from app.CRUD import get_class_by_id, check_schedule_conflict, create_registration, create_class_history, count_students_in_class, get_class_histories
from app.models.registration import Registration


def get_all_classes(db: Session, user_id: int | None = None):
    classes = db.query(ClassModel).all()
    result = []
    for cls in classes:
        is_registered = False
        if user_id:
            is_registered = db.query(Registration).filter_by(
                class_id=cls.id,
                student_id=user_id
            ).first() is not None

        # Convert schedule t·ª´ JSON object array sang string format
        schedule_str = cls.schedule
        if isinstance(cls.schedule, list):
            schedule_str = '; '.join([
                f"{slot['day']}: {slot['start']} - {slot['end']}" 
                for slot in cls.schedule 
                if isinstance(slot, dict) and 'day' in slot and 'start' in slot and 'end' in slot
            ])
        elif isinstance(cls.schedule, str):
            schedule_str = cls.schedule
        else:
            schedule_str = str(cls.schedule)

        result.append({
            "id": cls.id,
            "name": cls.name,
            "max_students": cls.max_students,
            "current_count": db.query(Registration).filter_by(class_id=cls.id).count(),
            "schedule": schedule_str,
            "course_id": cls.course_id,
            "course": cls.course.name if cls.course else None,
            "is_registered": is_registered
        })
    return result
def is_time_overlap(start1, end1, start2, end2):
    return start1 < end2 and end1 > start2

def has_schedule_conflict(new_schedule, other_schedule):
    for slot in new_schedule:
        for other in other_schedule:
            if slot['day'] == other['day']:
                if is_time_overlap(slot['start'], slot['end'], other['start'], other['end']):
                    return True
    return False

def create_class(db: Session, class_data: ClassCreate,user_id :int):
    # ƒê·∫£m b·∫£o schedule l√† list
    data = class_data.model_dump()
    if not isinstance(data['schedule'], list):
        raise HTTPException(status_code=400, detail="L·ªãch h·ªçc ph·∫£i l√† danh s√°ch c√°c khung th·ªùi gian!")
    # Ki·ªÉm tra tr√πng l·ªãch v·ªõi c√°c l·ªõp kh√°c
    all_classes = db.query(ClassModel).all()
    for cls in all_classes:
        if has_schedule_conflict(data['schedule'], cls.schedule):
            raise HTTPException(status_code=400, detail=f"L·ªãch h·ªçc b·ªã tr√πng v·ªõi l·ªõp: {cls.name}")
    data['create_by'] = user_id
    db_class = ClassModel(**data)
    db.add(db_class)
    db.commit()
    db.refresh(db_class)
    return ClassSchema.model_validate(db_class)

def update_class(db: Session, class_id: int, class_data: ClassCreate, user: User):
    db_class = db.query(ClassModel).filter(ClassModel.id == class_id).first()
    if not db_class:
        raise HTTPException(status_code=404, detail="Kh√¥ng t√¨m th·∫•y l·ªõp h·ªçc")
    
    # L∆∞u th√¥ng tin c≈© ƒë·ªÉ t·∫°o l·ªãch s·ª≠
    old_course_id = db_class.course_id
    old_name = db_class.name
    old_schedule = db_class.schedule
    
    # C·∫≠p nh·∫≠t th√¥ng tin l·ªõp h·ªçc
    if class_data.name is not None:
        db_class.name = class_data.name
    if class_data.max_students is not None:
        db_class.max_students = class_data.max_students
    if class_data.schedule is not None:
        if not isinstance(class_data.schedule, list):
            raise HTTPException(status_code=400, detail="L·ªãch h·ªçc ph·∫£i l√† danh s√°ch c√°c khung th·ªùi gian!")
        # Ki·ªÉm tra tr√πng l·ªãch v·ªõi c√°c l·ªõp kh√°c (b·ªè qua ch√≠nh l·ªõp n√†y)
        all_classes = db.query(ClassModel).filter(ClassModel.id != class_id).all()
        for cls in all_classes:
            if has_schedule_conflict(class_data.schedule, cls.schedule):
                raise HTTPException(status_code=400, detail=f"L·ªãch h·ªçc b·ªã tr√πng v·ªõi l·ªõp: {cls.name}")
        db_class.schedule = class_data.schedule
    if class_data.course_id is not None:
        # Ki·ªÉm tra kh√≥a h·ªçc t·ªìn t·∫°i n·∫øu ƒë∆∞·ª£c cung c·∫•p
        if class_data.course_id != old_course_id:
            db_course = db.query(CourseModel).filter(CourseModel.id == class_data.course_id).first()
            if not db_course:
                raise HTTPException(status_code=404, detail="Kh√¥ng t√¨m th·∫•y kh√≥a h·ªçc.")
            db_class.course_id = class_data.course_id
    
    db.commit()
    db.refresh(db_class)
    
    # T·∫°o l·ªãch s·ª≠ thay ƒë·ªïi n·∫øu c√≥ thay ƒë·ªïi
    changes = []
    if class_data.name and class_data.name != old_name:
        changes.append(f"T√™n l·ªõp: {old_name} ‚Üí {class_data.name}")
    if class_data.schedule and class_data.schedule != old_schedule:
        changes.append(f"L·ªãch h·ªçc: {old_schedule} ‚Üí {class_data.schedule}")
    if class_data.course_id and class_data.course_id != old_course_id:
        course_name = db_class.course.name if db_class.course else "Kh√¥ng x√°c ƒë·ªãnh"
        changes.append(f"Kh√≥a h·ªçc: ID {old_course_id} ‚Üí {course_name}")
    
    if changes:
        create_class_history(
            db, 
            class_id=class_id, 
            changed_by=user.id, 
            change_type="update_class", 
            note="; ".join(changes)
        )
    
    return ClassSchema.model_validate(db_class)

def delete_class(db: Session, class_id: int, user: User):
    """
    X√≥a m·ªôt l·ªõp h·ªçc v√† t·∫•t c·∫£ c√°c b·∫£n ghi li√™n quan m·ªôt c√°ch an to√†n.
    """
    # 1. T√¨m l·ªõp h·ªçc c·∫ßn x√≥a
    db_class = db.query(ClassModel).filter(ClassModel.id == class_id).first()
    if not db_class:
        raise HTTPException(status_code=404, detail="Kh√¥ng t√¨m th·∫•y l·ªõp h·ªçc")

    # (T√πy ch·ªçn) Ki·ªÉm tra quy·ªÅn c·ªßa ng∆∞·ªùi d√πng, v√≠ d·ª• ch·ªâ admin ƒë∆∞·ª£c x√≥a
    # if 'admin' not in [role.name for role in user.roles]:
    #     raise HTTPException(status_code=403, detail="Kh√¥ng c√≥ quy·ªÅn th·ª±c hi·ªán h√†nh ƒë·ªông n√†y")

    # 2. X√≥a t·∫•t c·∫£ c√°c b·∫£n ghi ph·ª• thu·ªôc TR∆Ø·ªöC KHI x√≥a l·ªõp h·ªçc
    # D·ª±a tr√™n ERD c·ªßa b·∫°n, ch√∫ng ta c·∫ßn x√≥a t·ª´ c√°c b·∫£ng:
    # class_histories, registrations, attendances, feedbacks.
    # `synchronize_session=False` ƒë∆∞·ª£c khuy·∫øn ngh·ªã cho c√°c thao t√°c x√≥a h√†ng lo·∫°t ƒë·ªÉ c√≥ hi·ªáu su·∫•t t·ªët h∆°n.

    # X√≥a l·ªãch s·ª≠ l·ªõp h·ªçc (nguy√™n nh√¢n g√¢y ra l·ªói c·ªßa b·∫°n)
    db.query(ClassHistory).filter(ClassHistory.class_id == class_id).delete(synchronize_session=False)

    # X√≥a c√°c l∆∞·ª£t ƒëƒÉng k√Ω
    db.query(Registration).filter(Registration.class_id == class_id).delete(synchronize_session=False)

    # X√≥a c√°c l∆∞·ª£t ƒëi·ªÉm danh
    db.query(Attendance).filter(Attendance.class_id == class_id).delete(synchronize_session=False)

    # X√≥a c√°c ph·∫£n h·ªìi
    db.query(Feedback).filter(Feedback.class_id == class_id).delete(synchronize_session=False)

    # 3. Cu·ªëi c√πng, x√≥a ch√≠nh l·ªõp h·ªçc ƒë√≥
    db.delete(db_class)

    # 4. L∆∞u t·∫•t c·∫£ c√°c thay ƒë·ªïi v√†o CSDL
    db.commit()

    return {"message": f"ƒê√£ x√≥a th√†nh c√¥ng l·ªõp h·ªçc ID {class_id} v√† c√°c d·ªØ li·ªáu li√™n quan."}


def register_class(db: Session, class_id: int, user):
    print(f"=== DEBUG REGISTRATION ===")
    print(f"User ID: {user.id}, Email: {getattr(user, 'email', 'N/A')}")
    print(f"Roles: {user.roles}, Class ID: {class_id}")

    # 1Ô∏è‚É£ L·∫•y l·ªõp h·ªçc
    class_obj = db.query(ClassModel).filter(ClassModel.id == class_id).first()
    if not class_obj:
        raise HTTPException(status_code=404, detail="Kh√¥ng t√¨m th·∫•y l·ªõp h·ªçc.")

    # 2Ô∏è‚É£ Ki·ªÉm tra ƒë√£ ƒëƒÉng k√Ω ch∆∞a
    existing_reg = db.query(Registration).filter(
        Registration.student_id == user.id,
        Registration.class_id == class_id
    ).first()
    if existing_reg:
        raise HTTPException(status_code=400, detail=f"B·∫°n ƒë√£ ƒëƒÉng k√Ω l·ªõp n√†y r·ªìi.")

    # 3Ô∏è‚É£ T·∫°o ƒëƒÉng k√Ω m·ªõi
    try:
        db_registration = Registration(student_id=user.id, class_id=class_id)
        db.add(db_registration)
        db.commit()
        db.refresh(db_registration)

        print(f"‚úÖ Registration created: ID={db_registration.id}")

        # 4Ô∏è‚É£ Ghi l·ªãch s·ª≠
        create_class_history(db, class_id=class_id, changed_by=user.id, change_type="register", note="ƒêƒÉng k√Ω l·ªõp")

        # 5Ô∏è‚É£ ƒê·∫øm s·ªë h·ªçc vi√™n hi·ªán t·∫°i
        count = count_students_in_class(db, class_id)

        # 6Ô∏è‚É£ G·ª≠i th√¥ng b√°o cho ng∆∞·ªùi t·∫°o l·ªõp (created_by)
        creator_id = getattr(class_obj, "created_by", None)
        if creator_id:
            print(f"üîî G·ª≠i th√¥ng b√°o cho ng∆∞·ªùi t·∫°o l·ªõp user_id={creator_id}")
            try:
                import asyncio
                asyncio.create_task(send_notification_to_user(
                    creator_id,
                    notification_type="new_registration",
                    message=f"H·ªçc vi√™n {user.email} v·ª´a ƒëƒÉng k√Ω l·ªõp {class_obj.name}",
                    data={
                        "class_id": class_id,
                        "student_id": user.id,
                        "student_email": user.email,
                        "student_name": user.name
                    }
                ))
            except RuntimeError:
                # N·∫øu ƒëang trong context ƒë·ªìng b·ªô (kh√¥ng ph·∫£i async) th√¨ g·ª≠i b·∫±ng loop
                loop = asyncio.get_event_loop()
                loop.create_task(send_notification_to_user(
                    creator_id,
                    notification_type="new_registration",
                    message=f"H·ªçc vi√™n {user.email} v·ª´a ƒëƒÉng k√Ω l·ªõp {class_obj.name}",
                    data={
                        "class_id": class_id,
                        "student_id": user.id,
                        "student_email": user.email,
                        "student_name": user.name
                    }
                ))

        return {"message": "ƒêƒÉng k√Ω th√†nh c√¥ng", "current_count": count}

    except Exception as e:
        db.rollback()
        print(f"‚ùå Error during registration: {e}")
        raise HTTPException(status_code=400, detail=f"L·ªói khi ƒëƒÉng k√Ω: {str(e)}")
def change_class_schedule(db: Session, class_id: int, new_schedule: str, user: User):
    if not user.roles or not any(r.lower() in ["teacher", "admin"] for r in user.roles):
        raise HTTPException(status_code=403, detail="Ch·ªâ gi·∫£ng vi√™n ho·∫∑c qu·∫£n tr·ªã m·ªõi ƒë∆∞·ª£c thay ƒë·ªïi l·ªãch h·ªçc.")
    class_obj = get_class_by_id(db, class_id)
    if not class_obj:
        raise HTTPException(status_code=404, detail="Kh√¥ng t√¨m th·∫•y l·ªõp h·ªçc.")
    old_schedule = class_obj.schedule
    class_obj.schedule = new_schedule  # type: ignore
    db.commit()
    create_class_history(db, class_id=class_id, changed_by=user.id, change_type="update_schedule", note=f"ƒê·ªïi l·ªãch t·ª´ {old_schedule} sang {new_schedule}")  # type: ignore
    return {"message": "ƒê√£ thay ƒë·ªïi l·ªãch h·ªçc", "old_schedule": old_schedule, "new_schedule": new_schedule}
def get_class_count(db: Session, class_id: int):
    count = count_students_in_class(db, class_id)
    return {"class_id": class_id, "current_count": count}

def get_class_history(db: Session, class_id: int, user: User):
    if not user.roles or not any(r.lower() in ["teacher", "admin"] for r in user.roles):
        raise HTTPException(status_code=403, detail="Ch·ªâ gi·∫£ng vi√™n ho·∫∑c qu·∫£n tr·ªã m·ªõi ƒë∆∞·ª£c xem l·ªãch s·ª≠ thay ƒë·ªïi.")
    histories = get_class_histories(db, class_id)
    return histories

def assign_course_to_class(db: Session, class_id: int, course_id: int, user: User):
    """G√°n kh√≥a h·ªçc v√†o l·ªõp h·ªçc"""
    # Ki·ªÉm tra quy·ªÅn
    if not user.roles or not any(r.lower() in ["teacher", "admin"] for r in user.roles):
        raise HTTPException(status_code=403, detail="Ch·ªâ gi·∫£ng vi√™n ho·∫∑c qu·∫£n tr·ªã m·ªõi ƒë∆∞·ª£c g√°n kh√≥a h·ªçc.")

    # Ki·ªÉm tra l·ªõp h·ªçc t·ªìn t·∫°i
    db_class = db.query(ClassModel).filter(ClassModel.id == class_id).first()
    if not db_class:
        raise HTTPException(status_code=404, detail="Kh√¥ng t√¨m th·∫•y l·ªõp h·ªçc.")

    # Ki·ªÉm tra kh√≥a h·ªçc t·ªìn t·∫°i
    db_course = db.query(CourseModel).filter(CourseModel.id == course_id).first()
    if not db_course:
        raise HTTPException(status_code=404, detail="Kh√¥ng t√¨m th·∫•y kh√≥a h·ªçc.")

    # G√°n kh√≥a h·ªçc cho l·ªõp h·ªçc
    old_course_id = db_class.course_id
    db_class.course_id = course_id
    db.commit()

    # T·∫°o l·ªãch s·ª≠ thay ƒë·ªïi
    create_class_history(
        db,
        class_id=class_id,
        changed_by=user.id,
        change_type="assign_course",
        note=f"G√°n kh√≥a h·ªçc {db_course.name} v√†o l·ªõp h·ªçc"
    )

    return {
        "message": f"ƒê√£ g√°n kh√≥a h·ªçc '{db_course.name}' v√†o l·ªõp h·ªçc '{db_class.name}'",
        "class_id": class_id,
        "course_id": course_id,
        "course_name": db_course.name,
        "old_course_id": old_course_id
    }

def remove_course_from_class(db: Session, class_id: int, user: User):
    """X√≥a kh√≥a h·ªçc kh·ªèi l·ªõp h·ªçc"""
    # Ki·ªÉm tra quy·ªÅn
    if not user.roles or not any(r.lower() in ["teacher", "admin"] for r in user.roles):
        raise HTTPException(status_code=403, detail="Ch·ªâ gi·∫£ng vi√™n ho·∫∑c qu·∫£n tr·ªã m·ªõi ƒë∆∞·ª£c x√≥a kh√≥a h·ªçc.")

    # Ki·ªÉm tra l·ªõp h·ªçc t·ªìn t·∫°i
    db_class = db.query(ClassModel).filter(ClassModel.id == class_id).first()
    if not db_class:
        raise HTTPException(status_code=404, detail="Kh√¥ng t√¨m th·∫•y l·ªõp h·ªçc.")

    if not db_class.course_id:
        raise HTTPException(status_code=400, detail="L·ªõp h·ªçc n√†y ch∆∞a ƒë∆∞·ª£c g√°n kh√≥a h·ªçc n√†o.")

    # L·∫•y th√¥ng tin kh√≥a h·ªçc tr∆∞·ªõc khi x√≥a
    course_name = db_class.course.name if db_class.course else "Kh√¥ng x√°c ƒë·ªãnh"
    old_course_id = db_class.course_id

    # X√≥a li√™n k·∫øt kh√≥a h·ªçc
    db_class.course_id = None
    db.commit()

    # T·∫°o l·ªãch s·ª≠ thay ƒë·ªïi
    create_class_history(
        db,
        class_id=class_id,
        changed_by=user.id,
        change_type="remove_course",
        note=f"X√≥a kh√≥a h·ªçc {course_name} kh·ªèi l·ªõp h·ªçc"
    )

    return {
        "message": f"ƒê√£ x√≥a kh√≥a h·ªçc '{course_name}' kh·ªèi l·ªõp h·ªçc '{db_class.name}'",
        "class_id": class_id,
        "removed_course_id": old_course_id,
        "removed_course_name": course_name
    }

def get_class_course(db: Session, class_id: int):
    """L·∫•y th√¥ng tin kh√≥a h·ªçc c·ªßa l·ªõp h·ªçc"""
    db_class = db.query(ClassModel).options(joinedload(ClassModel.course)).filter(ClassModel.id == class_id).first()
    if not db_class:
        raise HTTPException(status_code=404, detail="Kh√¥ng t√¨m th·∫•y l·ªõp h·ªçc.")

    if not db_class.course:
        return {
            "class_id": class_id,
            "class_name": db_class.name,
            "course": None,
            "message": "L·ªõp h·ªçc n√†y ch∆∞a ƒë∆∞·ª£c g√°n kh√≥a h·ªçc n√†o."
        }

    return {
        "class_id": class_id,
        "class_name": db_class.name,
        "course": {
            "id": db_class.course.id,
            "name": db_class.course.name,
            "description": db_class.course.description,
            "image": db_class.course.image
        }
    }

def get_classes_by_course(db: Session, course_id: int):
    """L·∫•y t·∫•t c·∫£ l·ªõp h·ªçc c·ªßa m·ªôt kh√≥a h·ªçc"""
    # Ki·ªÉm tra kh√≥a h·ªçc t·ªìn t·∫°i
    db_course = db.query(CourseModel).filter(CourseModel.id == course_id).first()
    if not db_course:
        raise HTTPException(status_code=404, detail="Kh√¥ng t√¨m th·∫•y kh√≥a h·ªçc.")
    
    # L·∫•y t·∫•t c·∫£ l·ªõp h·ªçc c·ªßa kh√≥a h·ªçc n√†y
    classes = db.query(ClassModel).filter(ClassModel.course_id == course_id).all()
    
    return {
        "course": {
            "id": db_course.id,
            "name": db_course.name,
            "description": db_course.description,
            "image": db_course.image
        },
        "classes": [
            {
                "id": cls.id,
                "name": cls.name,
                "max_students": cls.max_students,
                "schedule": cls.schedule,
                "current_students": count_students_in_class(db, cls.id)
            }
            for cls in classes
        ],
        "total_classes": len(classes)
    }

def get_class_students(db: Session, class_id: int):
    """L·∫•y danh s√°ch h·ªçc vi√™n trong l·ªõp h·ªçc"""
    # Ki·ªÉm tra l·ªõp h·ªçc t·ªìn t·∫°i
    db_class = db.query(ClassModel).filter(ClassModel.id == class_id).first()
    if not db_class:
        raise HTTPException(status_code=404, detail="Kh√¥ng t√¨m th·∫•y l·ªõp h·ªçc.")
    
    # L·∫•y danh s√°ch ƒëƒÉng k√Ω c·ªßa l·ªõp h·ªçc
    from app.models.registration import Registration
    from app.models.user import User as UserModel
    
    registrations = db.query(Registration).filter(Registration.class_id == class_id).all()
    
    # L·∫•y th√¥ng tin h·ªçc vi√™n
    students = []
    for reg in registrations:
        student = db.query(UserModel).filter(UserModel.id == reg.student_id).first()
        if student:
            students.append({
                "id": student.id,
                "name": student.name,
                "email": student.email,
                "registration_date": reg.created_at.isoformat() if hasattr(reg, 'created_at') else None
            })
    
    return {
        "class": {
            "id": db_class.id,
            "name": db_class.name,
            "max_students": db_class.max_students,
            "schedule": db_class.schedule
        },
        "students": students,
        "total_students": len(students),
        "available_slots": db_class.max_students - len(students)
    }

def get_class_students_count(db: Session, class_id: int):
    """L·∫•y s·ªë l∆∞·ª£ng h·ªçc vi√™n trong l·ªõp h·ªçc"""
    # Ki·ªÉm tra l·ªõp h·ªçc t·ªìn t·∫°i
    db_class = db.query(ClassModel).filter(ClassModel.id == class_id).first()
    if not db_class:
        raise HTTPException(status_code=404, detail="Kh√¥ng t√¨m th·∫•y l·ªõp h·ªçc.")
    
    # ƒê·∫øm s·ªë h·ªçc vi√™n
    from app.models.registration import Registration
    student_count = db.query(Registration).filter(Registration.class_id == class_id).count()
    
    return {
        "class_id": class_id,
        "class_name": db_class.name,
        "current_students": student_count,
        "max_students": db_class.max_students,
        "available_slots": db_class.max_students - student_count,
        "occupancy_rate": round((student_count / db_class.max_students) * 100, 1) if db_class.max_students > 0 else 0
    }
def unregister_class(db: Session, class_id: int,user):
    # L·∫•y th√¥ng tin l·ªõp h·ªçc tr∆∞·ªõc khi h·ªßy ƒëƒÉng k√Ω
    class_info = db.query(ClassModel).filter(ClassModel.id == class_id).first()
    if not class_info:
        raise HTTPException(status_code=404, detail="L·ªõp h·ªçc kh√¥ng t·ªìn t·∫°i")
    
    registration = db.query(Registration).filter_by(
        student_id = user.id,
        class_id = class_id
    ).first()
    if not registration:
        raise HTTPException(status_code=404,detail="B·∫°n ch∆∞a ƒëƒÉng k√Ω l·ªõp n√†y")
    db.delete(registration)
    db.commit()
    # C·∫≠p nh·∫≠t l·ªãch s·ª≠ (n·∫øu c√≥)
    create_class_history(
        db,
        class_id=class_id,
        changed_by=user.id,
        change_type="unregister",
        note="H·ªßy ƒëƒÉng k√Ω l·ªõp"
    )

    count = count_students_in_class(db, class_id)
    return {
        "message": "H·ªßy ƒëƒÉng k√Ω th√†nh c√¥ng", 
        "current_count": count,
        "class_name": class_info.name
    }