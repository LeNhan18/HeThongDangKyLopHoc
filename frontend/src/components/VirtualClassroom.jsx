import React, { useState, useEffect } from 'react';
import './css/VirtualClassroom.css';

const VirtualClassroom = ({ classId, studentId, onLeave }) => {
  const [isJoined, setIsJoined] = useState(false);
  const [participants, setParticipants] = useState([]);
  const [chatMessages, setChatMessages] = useState([]);
  const [newMessage, setNewMessage] = useState('');
  const [classInfo, setClassInfo] = useState(null);

  useEffect(() => {
    // Mock class info
    setClassInfo({
      id: classId,
      name: 'L·ªõp h·ªçc Ti·∫øng Anh c∆° b·∫£n',
      instructor: 'Nguy·ªÖn VƒÉn A',
      topic: 'B√†i 5: Ng·ªØ ph√°p th√¨ hi·ªán t·∫°i ƒë∆°n'
    });

    // Mock participants
    setParticipants([
      { id: 'INST001', name: 'Nguy·ªÖn VƒÉn A', role: 'instructor', isOnline: true },
      { id: 'ST001', name: 'Tr·∫ßn VƒÉn B', role: 'student', isOnline: true },
      { id: 'ST002', name: 'L√™ Th·ªã C', role: 'student', isOnline: true },
      { id: 'ST005', name: 'Nguy·ªÖn VƒÉn F', role: 'student', isOnline: false },
    ]);

    // Mock chat messages
    setChatMessages([
      { id: 1, sender: 'Nguy·ªÖn VƒÉn A', message: 'Ch√†o m·ª´ng c√°c b·∫°n ƒë·∫øn v·ªõi bu·ªïi h·ªçc h√¥m nay!', time: '14:00', role: 'instructor' },
      { id: 2, sender: 'Tr·∫ßn VƒÉn B', message: 'Ch√†o th·∫ßy ·∫°!', time: '14:01', role: 'student' },
      { id: 3, sender: 'L√™ Th·ªã C', message: 'Em ƒë√£ s·∫µn s√†ng h·ªçc b√†i m·ªõi', time: '14:02', role: 'student' },
    ]);

    // Auto join after 1 second
    setTimeout(() => {
      setIsJoined(true);
    }, 1000);
  }, [classId]);

  const handleSendMessage = () => {
    if (newMessage.trim()) {
      const message = {
        id: chatMessages.length + 1,
        sender: 'T√¥i', // Current user
        message: newMessage,
        time: new Date().toLocaleTimeString('vi-VN', { hour: '2-digit', minute: '2-digit' }),
        role: 'student'
      };
      setChatMessages([...chatMessages, message]);
      setNewMessage('');
    }
  };

  const handleLeaveClass = () => {
    setIsJoined(false);
    setTimeout(() => {
      onLeave();
    }, 500);
  };

  if (!isJoined) {
    return (
      <div className="joining-classroom">
        <div className="joining-content">
          <div className="joining-spinner"></div>
          <h3>ƒêang v√†o ph√≤ng h·ªçc...</h3>
          <p>Vui l√≤ng ch·ªù trong gi√¢y l√°t</p>
        </div>
      </div>
    );
  }

  return (
    <div className="virtual-classroom">
      <div className="classroom-header">
        <div className="class-info">
          <h2>{classInfo?.name}</h2>
          <p><strong>Ch·ªß ƒë·ªÅ:</strong> {classInfo?.topic}</p>
          <p><strong>Gi·∫£ng vi√™n:</strong> {classInfo?.instructor}</p>
        </div>
        <div className="classroom-controls">
          <button className="control-btn mic-btn">
            <span className="icon">üé§</span>
            Micro
          </button>
          <button className="control-btn camera-btn">
            <span className="icon">üìπ</span>
            Camera
          </button>
          <button className="control-btn screen-btn">
            <span className="icon">üñ•Ô∏è</span>
            Chia s·∫ª m√†n h√¨nh
          </button>
          <button className="leave-btn" onClick={handleLeaveClass}>
            <span className="icon">üö™</span>
            R·ªùi ph√≤ng
          </button>
        </div>
      </div>

      <div className="classroom-content">
        <div className="main-content">
          <div className="video-area">
            <div className="instructor-video">
              <div className="video-placeholder">
                <div className="avatar-large">
                  {classInfo?.instructor.charAt(0)}
                </div>
                <p>{classInfo?.instructor}</p>
                <span className="role-badge instructor">Gi·∫£ng vi√™n</span>
              </div>
            </div>
            
            <div className="students-videos">
              {participants.filter(p => p.role === 'student').map(participant => (
                <div key={participant.id} className={`student-video ${participant.isOnline ? 'online' : 'offline'}`}>
                  <div className="video-placeholder small">
                    <div className="avatar-small">
                      {participant.name.charAt(0)}
                    </div>
                    <p>{participant.name}</p>
                    {!participant.isOnline && <span className="offline-badge">Offline</span>}
                  </div>
                </div>
              ))}
            </div>
          </div>

          <div className="lesson-content">
            <div className="content-header">
              <h3>N·ªôi dung b√†i h·ªçc</h3>
            </div>
            <div className="content-body">
              <div className="presentation-area">
                <div className="slide-placeholder">
                  <h4>Th√¨ hi·ªán t·∫°i ƒë∆°n (Present Simple)</h4>
                  <div className="slide-content">
                    <p><strong>C·∫•u tr√∫c:</strong></p>
                    <ul>
                      <li>Kh·∫≥ng ƒë·ªãnh: S + V(s/es) + O</li>
                      <li>Ph·ªß ƒë·ªãnh: S + don't/doesn't + V + O</li>
                      <li>Nghi v·∫•n: Do/Does + S + V + O?</li>
                    </ul>
                    <p><strong>V√≠ d·ª•:</strong></p>
                    <ul>
                      <li>I study English every day.</li>
                      <li>She doesn't like coffee.</li>
                      <li>Do you play football?</li>
                    </ul>
                  </div>
                </div>
              </div>
            </div>
          </div>
        </div>

        <div className="sidebar">
          <div className="participants-panel">
            <h4>Ng∆∞·ªùi tham gia ({participants.length})</h4>
            <div className="participants-list">
              {participants.map(participant => (
                <div key={participant.id} className={`participant-item ${participant.role}`}>
                  <div className="participant-avatar">
                    {participant.name.charAt(0)}
                  </div>
                  <div className="participant-info">
                    <span className="name">{participant.name}</span>
                    <span className={`status ${participant.isOnline ? 'online' : 'offline'}`}>
                      {participant.isOnline ? 'Tr·ª±c tuy·∫øn' : 'Ngo·∫°i tuy·∫øn'}
                    </span>
                  </div>
                  {participant.role === 'instructor' && (
                    <span className="role-badge instructor">GV</span>
                  )}
                </div>
              ))}
            </div>
          </div>

          <div className="chat-panel">
            <h4>Tr√≤ chuy·ªán</h4>
            <div className="chat-messages">
              {chatMessages.map(msg => (
                <div key={msg.id} className={`message ${msg.role}`}>
                  <div className="message-header">
                    <span className="sender">{msg.sender}</span>
                    <span className="time">{msg.time}</span>
                  </div>
                  <div className="message-content">{msg.message}</div>
                </div>
              ))}
            </div>
            <div className="chat-input">
              <input
                type="text"
                value={newMessage}
                onChange={(e) => setNewMessage(e.target.value)}
                placeholder="Nh·∫≠p tin nh·∫Øn..."
                onKeyPress={(e) => e.key === 'Enter' && handleSendMessage()}
              />
              <button onClick={handleSendMessage} className="send-btn">
                <span className="icon">üì§</span>
              </button>
            </div>
          </div>
        </div>
      </div>
    </div>
  );
};

export default VirtualClassroom;
