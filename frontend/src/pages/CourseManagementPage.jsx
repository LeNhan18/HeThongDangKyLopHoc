import React, { useState, useEffect } from 'react';
import CourseClassStats from '../components/CourseClassStats';
import ClassStudentsList from '../components/ClassStudentsList';
import './css/CourseManagementPage.css';

const CourseManagementPage = ({ user }) => {
  const [courses, setCourses] = useState([]);
  const [classes, setClasses] = useState([]);
  const [loading, setLoading] = useState(true);
  const [selectedCourse, setSelectedCourse] = useState(null);
  const [selectedClass, setSelectedClass] = useState(null);
  const [showAssignModal, setShowAssignModal] = useState(false);
  const [showCreateModal, setShowCreateModal] = useState(false);
  const [showStats, setShowStats] = useState(false);
  const [showStudentsModal, setShowStudentsModal] = useState(false);
  const [selectedClassForStudents, setSelectedClassForStudents] = useState(null);
  const [newClass, setNewClass] = useState({
    name: '',
    max_students: 30,
    schedule: [],
    course_id: null
  });

  useEffect(() => {
    fetchData();
  }, []);

  const fetchData = async () => {
    try {
      setLoading(true);
      const [coursesRes, classesRes] = await Promise.all([
        fetch('http://localhost:8000/courses/'),
        fetch('http://localhost:8000/classes/')
      ]);
      
      const coursesData = await coursesRes.json();
      const classesData = await classesRes.json();
      
      setCourses(coursesData);
      // Normalize schedule: always array
      setClasses(classesData.map(cls => ({
        ...cls,
        schedule: Array.isArray(cls.schedule)
          ? cls.schedule
          : (typeof cls.schedule === 'string' && cls.schedule.trim().startsWith('['))
            ? JSON.parse(cls.schedule)
            : []
      })));
    } catch (error) {
      console.error('L·ªói khi t·∫£i d·ªØ li·ªáu:', error);
    } finally {
      setLoading(false);
    }
  };

  const handleAssignCourse = async (classId, courseId) => {
    try {
      const response = await fetch(`http://localhost:8000/class/${classId}/assign_course/${courseId}`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'Authorization': `Bearer ${user?.token}`
        }
      });

      if (response.ok) {
        const result = await response.json();
        alert(result.message);
        fetchData();
        setShowAssignModal(false);
      } else {
        const error = await response.json();
        alert(`L·ªói: ${error.detail}`);
      }
    } catch (error) {
      console.error('L·ªói khi g√°n kh√≥a h·ªçc:', error);
      alert('C√≥ l·ªói x·∫£y ra khi g√°n kh√≥a h·ªçc');
    }
  };

  const handleRemoveCourse = async (classId) => {
    // eslint-disable-next-line no-restricted-globals
    if (!confirm('B·∫°n c√≥ ch·∫Øc mu·ªën x√≥a kh√≥a h·ªçc kh·ªèi l·ªõp h·ªçc n√†y?')) return;

    try {
      const response = await fetch(`http://localhost:8000/class/${classId}/remove_course`, {
        method: 'DELETE',
        headers: {
          'Content-Type': 'application/json',
          'Authorization': `Bearer ${user?.token}`
        }
      });

      if (response.ok) {
        const result = await response.json();
        alert(result.message);
        fetchData();
      } else {
        const error = await response.json();
        alert(`L·ªói: ${error.detail}`);
      }
    } catch (error) {
      console.error('L·ªói khi x√≥a kh√≥a h·ªçc:', error);
      alert('C√≥ l·ªói x·∫£y ra khi x√≥a kh√≥a h·ªçc');
    }
  };

  const handleCreateClass = async () => {
    try {
      const response = await fetch('http://localhost:8000/class/', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'Authorization': `Bearer ${user?.token}`
        },
        body: JSON.stringify(newClass)
      });

      if (response.ok) {
        await response.json();
        alert('T·∫°o l·ªõp h·ªçc th√†nh c√¥ng!');
        setNewClass({ name: '', max_students: 30, schedule: [], course_id: null });
        setShowCreateModal(false);
        fetchData();
      } else {
        const error = await response.json();
        alert(`L·ªói: ${error.detail}`);
      }
    } catch (error) {
      console.error('L·ªói khi t·∫°o l·ªõp h·ªçc:', error);
      alert('C√≥ l·ªói x·∫£y ra khi t·∫°o l·ªõp h·ªçc');
    }
  };

  const handleViewStudents = (classId) => {
    setSelectedClassForStudents(classId);
    setShowStudentsModal(true);
  };

  const getCourseName = (courseId) => {
    const course = courses.find(c => c.id === courseId);
    return course ? course.name : 'Ch∆∞a g√°n';
  };

  if (loading) {
    return (
      <div className="course-management-page">
        <div className="loading">ƒêang t·∫£i...</div>
      </div>
    );
  }

  if (showStats) {
    return (
      <div className="course-management-page">
        <div className="page-header">
          <h1>Th·ªëng K√™ Kh√≥a H·ªçc & L·ªõp H·ªçc</h1>
          <div className="header-actions">
            <button 
              className="btn btn-secondary"
              onClick={() => setShowStats(false)}
            >
              ‚Üê Quay L·∫°i
            </button>
          </div>
        </div>
        <CourseClassStats />
      </div>
    );
  }

  return (
    <div className="course-management-page">
      <div className="page-header">
        <h1>Qu·∫£n L√Ω Kh√≥a H·ªçc v√† L·ªõp H·ªçc</h1>
        <div className="header-actions">
          <button 
            className="btn btn-secondary"
            onClick={() => setShowStats(true)}
          >
            üìä Th·ªëng K√™
          </button>
          <button 
            className="btn btn-primary"
            onClick={() => setShowCreateModal(true)}
          >
            + T·∫°o L·ªõp H·ªçc M·ªõi
          </button>
        </div>
      </div>

      <div className="content-grid">
        {/* Danh s√°ch kh√≥a h·ªçc */}
        <div className="section">
          <h2>Danh S√°ch Kh√≥a H·ªçc</h2>
          <div className="courses-list">
            {courses.map(course => (
              <div key={course.id} className="course-card">
                <div className="course-image">
                  <img src={course.image || '/default-course.jpg'} alt={course.name} />
                </div>
                <div className="course-info">
                  <h3>{course.name}</h3>
                  <p>{course.description}</p>
                  <div className="course-stats">
                    <span>ID: {course.id}</span>
                  </div>
                </div>
              </div>
            ))}
          </div>
        </div>

        {/* Danh s√°ch l·ªõp h·ªçc */}
        <div className="section">
          <h2>Danh S√°ch L·ªõp H·ªçc</h2>
          <div className="classes-list">
            {classes.map(cls => (
              <div key={cls.id} className="class-card">
                <div className="class-header">
                  <h3>{cls.name}</h3>
                  <div className="class-actions">
                    <button 
                      className="btn btn-small btn-info"
                      onClick={() => handleViewStudents(cls.id)}
                    >
                      üë• Th√†nh Vi√™n
                    </button>
                    <button 
                      className="btn btn-small btn-secondary"
                      onClick={() => {
                        setSelectedClass(cls);
                        setShowAssignModal(true);
                      }}
                    >
                      G√°n Kh√≥a H·ªçc
                    </button>
                    {cls.course_id && (
                      <button 
                        className="btn btn-small btn-danger"
                        onClick={() => handleRemoveCourse(cls.id)}
                      >
                        X√≥a Kh√≥a H·ªçc
                      </button>
                    )}
                  </div>
                </div>
                <div className="class-details">
                  <p><strong>Kh√≥a h·ªçc:</strong> {getCourseName(cls.course_id)}</p>
                  <p><strong>L·ªãch h·ªçc:</strong> {Array.isArray(cls.schedule) && cls.schedule.length > 0
  ? cls.schedule.map(slot => `${slot.day}: ${slot.start} - ${slot.end}`).join(', ')
  : 'Ch∆∞a c√≥ l·ªãch h·ªçc'}</p>
                  <p><strong>S·ªë h·ªçc vi√™n t·ªëi ƒëa:</strong> {cls.max_students}</p>
                </div>
              </div>
            ))}
          </div>
        </div>
      </div>

      {/* Modal g√°n kh√≥a h·ªçc */}
      {showAssignModal && (
        <div className="modal-overlay">
          <div className="modal">
            <div className="modal-header">
              <h3>G√°n Kh√≥a H·ªçc</h3>
              <button 
                className="close-btn"
                onClick={() => setShowAssignModal(false)}
              >
                √ó
              </button>
            </div>
            <div className="modal-body">
              <p>Ch·ªçn kh√≥a h·ªçc cho l·ªõp: <strong>{selectedClass?.name}</strong></p>
              <div className="course-selection">
                {courses.map(course => (
                  <div 
                    key={course.id} 
                    className={`course-option ${selectedCourse?.id === course.id ? 'selected' : ''}`}
                    onClick={() => setSelectedCourse(course)}
                  >
                    <h4>{course.name}</h4>
                    <p>{course.description}</p>
                  </div>
                ))}
              </div>
            </div>
            <div className="modal-footer">
              <button 
                className="btn btn-secondary"
                onClick={() => setShowAssignModal(false)}
              >
                H·ªßy
              </button>
              <button 
                className="btn btn-primary"
                onClick={() => {
                  if (selectedCourse && selectedClass) {
                    handleAssignCourse(selectedClass.id, selectedCourse.id);
                  }
                }}
                disabled={!selectedCourse}
              >
                G√°n Kh√≥a H·ªçc
              </button>
            </div>
          </div>
        </div>
      )}

      {/* Modal t·∫°o l·ªõp h·ªçc */}
      {showCreateModal && (
        <div className="modal-overlay">
          <div className="modal">
            <div className="modal-header">
              <h3>T·∫°o L·ªõp H·ªçc M·ªõi</h3>
              <button 
                className="close-btn"
                onClick={() => setShowCreateModal(false)}
              >
                √ó
              </button>
            </div>
            <div className="modal-body">
              <div className="form-group">
                <label>T√™n l·ªõp h·ªçc:</label>
                <input 
                  type="text"
                  value={newClass.name}
                  onChange={(e) => setNewClass({...newClass, name: e.target.value})}
                  placeholder="Nh·∫≠p t√™n l·ªõp h·ªçc"
                />
              </div>
              <div className="form-group">
                <label>S·ªë h·ªçc vi√™n t·ªëi ƒëa:</label>
                <input 
                  type="number"
                  value={newClass.max_students}
                  onChange={(e) => setNewClass({...newClass, max_students: parseInt(e.target.value)})}
                  min="1"
                />
              </div>
              <div className="form-group">
                <label>L·ªãch h·ªçc:</label>
                {Array.isArray(newClass.schedule) && newClass.schedule.length > 0 ? (
                  newClass.schedule.map((slot, idx) => (
                    <div key={idx} style={{ display: 'flex', gap: 8, alignItems: 'center', marginBottom: 8 }}>
                      <select
                        value={slot.day}
                        onChange={e => {
                          const updated = [...newClass.schedule];
                          updated[idx].day = e.target.value;
                          setNewClass({ ...newClass, schedule: updated });
                        }}
                      >
                        <option value="">Ch·ªçn th·ª©</option>
                        <option value="Th·ª© 2">Th·ª© 2</option>
                        <option value="Th·ª© 3">Th·ª© 3</option>
                        <option value="Th·ª© 4">Th·ª© 4</option>
                        <option value="Th·ª© 5">Th·ª© 5</option>
                        <option value="Th·ª© 6">Th·ª© 6</option>
                        <option value="Th·ª© 7">Th·ª© 7</option>
                        <option value="Ch·ªß nh·∫≠t">Ch·ªß nh·∫≠t</option>
                      </select>
                      <input
                        type="time"
                        value={slot.start}
                        onChange={e => {
                          const updated = [...newClass.schedule];
                          updated[idx].start = e.target.value;
                          setNewClass({ ...newClass, schedule: updated });
                        }}
                      />
                      <span>-</span>
                      <input
                        type="time"
                        value={slot.end}
                        onChange={e => {
                          const updated = [...newClass.schedule];
                          updated[idx].end = e.target.value;
                          setNewClass({ ...newClass, schedule: updated });
                        }}
                      />
                      <button
                        type="button"
                        className="btn btn-small btn-danger"
                        onClick={() => {
                          const updated = newClass.schedule.filter((_, i) => i !== idx);
                          setNewClass({ ...newClass, schedule: updated });
                        }}
                      >
                        X√≥a
                      </button>
                    </div>
                  ))
                ) : (
                  <div style={{ color: '#888', marginBottom: 8 }}>Ch∆∞a c√≥ l·ªãch h·ªçc n√†o</div>
                )}
                <button
                  type="button"
                  className="btn btn-small btn-info"
                  onClick={() => {
                    const updated = Array.isArray(newClass.schedule) ? [...newClass.schedule] : [];
                    updated.push({ day: '', start: '', end: '' });
                    setNewClass({ ...newClass, schedule: updated });
                  }}
                >
                  + Th√™m khung l·ªãch
                </button>
              </div>
              <div className="form-group">
                <label>Kh√≥a h·ªçc (t√πy ch·ªçn):</label>
                <select 
                  value={newClass.course_id || ''}
                  onChange={(e) => setNewClass({...newClass, course_id: e.target.value ? parseInt(e.target.value) : null})}
                >
                  <option value="">Ch·ªçn kh√≥a h·ªçc</option>
                  {courses.map(course => (
                    <option key={course.id} value={course.id}>
                      {course.name}
                    </option>
                  ))}
                </select>
              </div>
            </div>
            <div className="modal-footer">
              <button 
                className="btn btn-secondary"
                onClick={() => setShowCreateModal(false)}
              >
                H·ªßy
              </button>
              <button 
                className="btn btn-primary"
                onClick={handleCreateClass}
                disabled={!newClass.name || !newClass.schedule}
              >
                T·∫°o L·ªõp H·ªçc
              </button>
            </div>
          </div>
        </div>
      )}

      {/* Modal xem th√†nh vi√™n */}
      {showStudentsModal && selectedClassForStudents && (
        <ClassStudentsList 
          classId={selectedClassForStudents}
          onClose={() => {
            setShowStudentsModal(false);
            setSelectedClassForStudents(null);
          }}
        />
      )}
    </div>
  );
};

export default CourseManagementPage; 